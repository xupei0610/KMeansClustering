#!/usr/bin/env python3
# -*- coding:utf-8 -*-
"""This script will do some analysis to the log file generated by run.sh in the folder log.
   This script is just for me to write report. It is not a formal program to analyze testing results.
"""

__author__ = "Pei Xu, xuxx0884@umn.edu"
__copyright__ = "Copyright 2016, Pei Xu"
__license__ = "MIT"
__version__ = "0.9"
__date__ = "19:02:38, Nov. 17th, 2016"

import os
import re
import codecs
import math
import collections

import preprocess as token
import matplotlib.pyplot as plt
import matplotlib.colors as pltcolor


def get_model_name(k):
    if k == token.WORD_BAG_FILE:
        return "Bag-of-Words"
    else:
        for n in token.N_GRAM:
            if k == token.N_GRAM_FILE.replace('<n>', str(n)):
                return str(n) + "-Grams"
    return ""


token_dir = os.path.join(os.getcwd(), token.TARGET_FOLDER)
files = list(filter(lambda f: f.endswith('clabel'), os.listdir(token_dir)))
tokens = {}
print("Number of tokens:")
for file_name in files:
    count = 0
    with codecs.open(os.path.join(token_dir, file_name), 'r', encoding='ascii', errors='ignore') as f:
        text = f.read()
    print("  %s: %d" %
          (get_model_name(file_name[0:file_name.index('.clabel')]), len(text.splitlines())))
    tokens[file_name[0:file_name.index('.clabel')]] = len(text.splitlines())


print("Best Solutions:")
log_dir = os.path.join(os.getcwd(), "log")
files = list(filter(lambda f: f.startswith('log'), os.listdir(log_dir)))

solution = collections.OrderedDict(
    {k: collections.OrderedDict(sorted({v: [] for v in [20, 40, 60, 65, 80]}.items())) for k in ['bag', 'char3', 'char5', 'char7']})

for file_name in files:
    name_elements = file_name.split("_")
    k = int(name_elements[1])
    model = name_elements[2]

    with codecs.open(os.path.join(log_dir, file_name), 'r', encoding='ascii', errors='ignore') as f:
        text = f.read()
    block = text.split("Parameters:")

    evaluation = []
    iters = 0
    time = 0.0
    min_objval = float('inf')
    for i in range(1, len(block)):
        evaluation.append(re.findall('\d+\.\d+\t\d+\.\d+\t\d+\.\d+',
                                     block[i])[0].split('\t'))
        evaluation[len(evaluation) - 1].append(
            re.findall('Random Seed: (\d+)', block[i])[0])

        iters = iters + int(re.findall(
            'Iteration: (\d+). Updated Centroids: 0.', block[i])[0])
        time = time + float(re.findall('Time taken: (\d+\.\d+)s', block[i])[0])

        objval = float(evaluation[i - 1][2])
        if objval < min_objval:
            best_solution = i - 1
            min_objval = objval

    res = evaluation[best_solution]
    res.append(float(iters) / 20)
    res.append(time / 20)
    solution[model][k] = res

i = 0
plt.figure(1)
for k in ['bag', 'char3', 'char5', 'char7']:
    model_name = get_model_name(k)
    v = solution[k]
    i = i + 1
    keys = []
    en_vals = []
    pu_vals = []
    ov_vals = []
    print("\\hline\\multirow{5}{*}{\\begin{array}{c}\\text{" + model_name +
          "}\\\\\\text{" + "{:,}".format(tokens[k]) + " tokens}\\end{array}}")
    for key, val in v.items():
        keys.append(key)
        ov_vals.append(float(val[2]))
        pu_vals.append(float(val[1]))
        en_vals.append(float(val[0]))
        print(" & %d & %s & %s & %s & %s & %.1f & %.6fs \\\\" %
              (key, val[2], val[1], val[0], val[3], val[4], val[5]))
        if key == 80:
            print("\\hline")
        else:
            print("\\cline{2-8}")

    ax1 = plt.subplot(2, 2, i)
    plt.xticks(keys, keys)
    plt.plot(keys, pu_vals, 'ys-', keys, en_vals, 'b^-')
    if i == 1:
        plt.legend(['Purity', 'Entropy'], fontsize='10', numpoints=1, loc=2)
    if i == 1 or i == 3:
        ax1.set_ylabel('Purity & Entropy', fontsize='10')
    ax1.set_ylim(0, 3)
    ax1.tick_params(axis='both', labelsize='10')
    ax2 = plt.twinx()
    if i == 2 or i == 4:
        ax2.set_ylabel('Obj. Val', fontsize='10')
    ax2.set_ylim(1500, 8000)
    ax2.tick_params(axis='both', labelsize='10')
    ax2.plot(keys, ov_vals, 'ro-')
    if i == 1:
        plt.legend(['Obj. Val'], fontsize='10', numpoints=1, loc=1)
    plt.title(model_name + ' Model', fontsize='12')
    if i == 3 or i == 4:
        ax1.set_xlabel('k: # of clusters', fontsize='10')
# plt.tight_layout()
# plt.show()

plt.figure(2).suptitle('Entropy Change Tendency')
plt.figure(3).suptitle('Purity Change Tendency')
plt.figure(4).suptitle('Objective Value Change Tendency')
keys = [odd for odd in range(0, 40) if odd % 2 == 1]
legend = []
for file_name in files:
    name_elements = file_name.split("_")
    k = int(name_elements[1])
    model = name_elements[2]

    with codecs.open(os.path.join(log_dir, file_name), 'r', encoding='ascii', errors='ignore') as f:
        text = f.read()
    block = text.split("Parameters:")

    evaluation = []
    iters = 0
    time = 0.0
    min_objval = float('inf')
    for i in range(1, len(block)):
        evaluation.append(re.findall('\d+\.\d+\t\d+\.\d+\t\d+\.\d+',
                                     block[i])[0].split('\t'))
    for i in [2, 3, 4]:
        plt.figure(i)
        if model == 'bag':
            ax1 = plt.subplot(2, 2, 1)
            plt.xticks(keys, keys)
            plt.title(get_model_name('bag') + " Model", fontsize="10")
            if i == 2:
                ax1.set_ylabel('Entropy', fontsize="10")
            elif i == 3:
                ax1.set_ylabel('Purity', fontsize="10")
            else:
                ax1.set_ylabel('Obj. Value', fontsize="10")
        elif model == 'char3':
            ax1 = plt.subplot(2, 2, 2)
            plt.xticks(keys, keys)
            plt.title(get_model_name('char3') + " Model", fontsize="10")
            ax1.set_xlabel('Random Seed', fontsize="10")
            ax1.xaxis.set_label_coords(1.05, -0.1)
        elif model == 'char5':
            ax1 = plt.subplot(2, 2, 3)
            plt.xticks(keys, keys)
            plt.title(get_model_name('char5') + " Model", fontsize="10")
            if i == 2:
                ax1.set_ylabel('Entropy', fontsize="10")
            elif i == 3:
                ax1.set_ylabel('Purity', fontsize="10")
            else:
                ax1.set_ylabel('Obj. Value', fontsize="10")
        else:
            ax1 = plt.subplot(2, 2, 4)
            plt.xticks(keys, keys)
            plt.title(get_model_name('char7') + " Model", fontsize="10")
            ax1.set_xlabel('Random Seed', fontsize="10")
            ax1.xaxis.set_label_coords(1.05, -0.1)

        if i == 2:
            ax1.set_ylim(1.3, 2.8)
        elif i == 3:
            ax1.set_ylim(0.45, 0.75)
        elif model != 'bag':
            ax1.set_ylim(3000, 8100)
        else:
            ax1.set_ylim(1950, 8000)

        if k == 20:
            maker = 's'
            color = 'r'
        elif k == 40:
            maker = '^'
            color = 'y'
        elif k == 60:
            maker = 'o'
            color = 'b'
        elif k == 65:
            maker = "*"
            color = 'c'
        else:
            maker = 'x'
            color = 'm'
        maker = ''

        plt.plot(keys, [e[i - 2] for e in evaluation],
                 color + maker + '-', label="k = " + str(k))
        ax1.tick_params(axis='both', labelsize='8')
        if k == 80 and model == 'char7':
            ax1.legend(loc=9, bbox_to_anchor=(-0.1, -0.1), ncol=6, fontsize=10)
# plt.show()

keys = [20, 40, 60, 65, 80]
models = ['bag', 'char3', 'char5', 'char7']
evaluation = {v: {rs: {k: [] for k in keys} for rs in range(0, 40) if rs % 2 == 1}
              for v in models}
for file_name in files:
    name_elements = file_name.split("_")
    k = int(name_elements[1])
    model = name_elements[2]

    with codecs.open(os.path.join(log_dir, file_name), 'r', encoding='ascii', errors='ignore') as f:
        text = f.read()
    block = text.split("Parameters:")
    for i in range(1, len(block)):
        evaluation[model][int(re.findall('Random Seed: (\d+)', block[i])[0])
                          ][k] = re.findall('\d+\.\d+\t\d+\.\d+\t\d+\.\d+', block[i])[0].split('\t')

plt.figure(5).suptitle('Entropy Change Tendency')
plt.figure(6).suptitle('Purity Change Tendency')
plt.figure(7).suptitle('Objective Value Change Tendency')
attr = ['Entropy', 'Purity', 'Obj. Value']
for indx in [0, 1, 2]:
    i = 0
    plt.figure(indx + 5)
    for model in models:
        i = i + 1
        ax1 = plt.subplot(2, 2, i)
        plt.title(get_model_name(model) + ' Model', fontsize=10)
        plt.xticks(keys, keys)
        for rs, v in sorted(evaluation[model].items()):
            if (i == 1 and rs < 10) or (i == 2 and rs < 20 and rs > 10) or (i == 3 and rs > 20 and rs < 30) or (i == 4 and rs > 30):
                plt.plot(keys, [e[indx] for _, e in sorted(v.items())],
                         label="Seed: " + str(rs))
            plt.plot(keys, [e[indx] for _, e in sorted(v.items())])
        ax1.set_xlabel('k', fontsize="10")
        if indx == 0:
            ax1.set_ylim(1.3, 2.8)
        elif indx == 1:
            ax1.set_ylim(0.45, 0.75)
        elif model != 'bag':
            ax1.set_ylim(3000, 8100)
        else:
            ax1.set_ylim(1950, 8000)
        ax1.xaxis.set_label_coords(1.05, -0.1)
        if (i % 2 == 1):
            ax1.set_ylabel(attr[indx], fontsize="10")
        plt.legend(loc=0, fontsize=9)
        ax1.tick_params(axis='both', labelsize='8')

# plt.show()

# Cluster earn    acq     crude   trade   money - fx      interest
# ship    sugar   coffee  gold    money - supply  gnp     cpi     cocoa
# copper  jobs    iron - steel    alum    grain   reserves        nat -
# gas       ipi     rubber  veg - oil       tin     cotton  bop     wpi
# gas     pet - chem      livestock       strategic - metal       retail
# orange  zinc    housing heat    lumber  silver  carcass fuel    lei
# oilseed lead    meal - feed     income  tea     yen     potato  instal -
# debt   jet     nickel  platinum        dlr     cpu     inventories
# groundnut       naphtha rand    wool    l - cattle      coconut hog
# rice    propane

best = """0	23	111	0	0	2	0	0	0	2	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	1	0	0	0	0	0	0	0	0	0	0	1	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
1	169	1	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
2	27	125	32	8	14	5	22	7	8	20	3	5	3	8	7	3	1	7	5	1	6	3	7	0	4	4	1	0	1	1	1	2	0	3	2	2	0	1	1	1	1	1	0	0	0	0	0	1	0	0	0	1	0	0	0	0	0	0	0	0	0	0	0	0	0
3	76	14	11	2	2	2	2	6	4	10	2	11	2	2	1	4	1	1	3	2	1	2	0	0	0	3	1	0	0	1	0	1	5	1	0	0	0	0	1	1	2	0	0	0	1	0	1	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
4	2	1	0	0	0	1	0	0	0	0	22	0	5	0	0	0	0	0	0	0	0	1	0	0	0	0	0	3	0	0	0	0	5	0	0	1	0	0	0	0	0	1	0	0	0	1	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
5	5	2	1	7	20	16	1	0	0	1	8	4	0	0	0	1	0	1	0	17	1	0	0	0	0	0	6	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
6	0	168	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
7	0	3	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
8	10	113	3	4	2	0	6	0	0	2	0	0	0	2	2	0	0	3	1	0	4	0	2	1	0	0	0	0	3	2	2	0	0	0	2	0	0	0	0	2	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
9	0	0	1	2	1	0	0	0	0	0	3	0	13	0	3	13	0	2	0	0	0	12	1	0	0	0	0	13	0	0	0	0	1	0	2	0	0	0	0	0	0	2	0	1	0	1	0	0	0	0	0	0	0	0	1	0	0	0	0	0	0	0	0	0	0
10	44	101	6	0	4	4	2	1	1	2	0	0	1	0	2	0	1	3	0	0	2	0	1	0	0	0	0	0	3	0	0	0	0	0	1	0	0	1	0	0	0	0	0	0	0	0	1	0	0	0	1	0	0	0	0	0	0	0	0	0	0	0	0	0	0
11	3	19	2	0	0	0	0	5	0	0	0	0	0	0	2	0	0	0	1	0	0	0	0	0	0	1	0	0	0	0	1	0	0	2	1	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
12	11	60	12	1	1	2	8	2	1	4	0	0	0	2	0	0	10	3	1	0	0	0	2	1	0	0	0	0	3	3	1	3	0	0	0	0	0	2	1	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
13	0	3	0	0	0	0	0	0	0	0	0	0	0	0	0	0	1	0	0	0	0	0	1	0	0	0	0	0	0	3	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
14	0	8	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
15	100	7	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
16	94	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
17	5	37	19	52	17	8	25	8	15	3	3	12	7	2	7	2	6	5	12	0	2	2	4	14	3	1	0	0	2	1	2	2	0	1	2	0	0	1	6	1	0	0	0	1	0	0	1	0	2	0	0	0	1	0	0	0	0	0	1	1	1	0	0	0	0
18	0	2	0	0	0	0	0	0	0	36	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
19	67	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
20	0	0	38	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	1	0	0	0	0	0	0	0	10	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
21	66	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
22	21	3	10	2	51	1	1	1	2	0	1	0	0	0	0	1	0	0	0	0	0	0	0	2	0	1	3	0	0	0	2	0	1	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
23	0	115	1	0	1	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
24	205	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
25	118	1	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
26	0	4	2	10	65	14	2	0	0	0	0	0	1	0	0	0	0	0	1	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	2	0	0	0	0	0	3	0	0	0	0	0	0	0	0	0	0	0
27	0	28	0	0	0	1	0	0	0	0	1	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
28	0	0	0	0	0	0	0	1	4	0	0	0	0	0	0	0	0	0	1	0	0	0	0	2	0	1	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
29	94	11	0	3	0	0	0	0	0	0	2	0	0	0	1	0	0	0	0	2	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
30	0	0	2	2	5	1	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
31	81	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	1	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
32	54	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
33	2	0	1	4	2	3	0	0	0	0	34	0	0	0	0	0	0	0	0	2	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	1	0	0	0	0	0	0	0	0	0	0	0	0	0	3	0	0	0	0	0	1	0	0	0	0	0	0	0	0	0
34	60	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
35	8	0	0	2	0	2	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
36	146	3	2	0	0	0	0	0	0	2	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
37	124	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
38	0	1	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
39	1	5	0	0	0	0	0	0	1	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
40	0	0	0	0	0	14	1	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
41	199	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
42	0	10	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
43	0	0	3	0	0	0	0	0	0	0	0	0	0	0	14	0	4	1	0	0	1	0	0	0	0	0	0	0	0	1	0	1	0	0	0	0	1	0	0	0	7	0	0	5	0	0	0	0	0	0	0	0	0	0	0	0	0	1	0	0	0	0	0	0	1
44	170	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
45	12	40	21	15	50	31	46	11	5	4	5	12	1	2	1	13	2	1	6	1	4	1	2	3	9	1	0	0	0	0	0	2	0	3	0	1	0	0	1	0	0	0	0	0	1	0	0	3	0	0	0	0	0	0	0	0	0	0	0	0	0	1	1	0	0
46	0	2	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
47	8	0	2	26	2	0	0	0	0	0	3	0	0	0	0	0	2	0	0	16	0	0	0	0	0	0	12	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	2	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
48	3	151	0	0	1	0	0	1	0	0	0	0	0	0	0	0	3	0	0	0	0	0	0	0	0	0	0	0	0	2	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
49	75	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
50	1	0	138	1	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	1	0	0	0	0	0	0	0	3	0	0	0	1	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
51	54	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
52	100	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
53	142	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
54	32	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
55	45	116	16	5	4	0	9	2	2	5	1	1	0	0	5	0	0	1	3	0	3	0	0	0	1	3	1	0	2	0	0	0	0	1	1	0	0	1	0	0	0	0	0	0	0	0	1	0	0	0	0	0	2	0	0	0	0	0	0	0	0	0	0	0	0
56	72	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
57	41	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
58	15	139	1	0	0	0	0	0	1	2	0	0	0	0	0	0	1	0	0	0	3	0	0	0	0	0	0	0	1	0	0	1	0	1	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
59	3	143	0	0	0	0	2	0	1	0	0	0	0	0	0	0	0	0	0	0	0	0	1	0	0	0	0	0	0	0	0	1	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	2	0	0	0	0	0	0	0	0	0	0	0	0	0	0
60	51	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
61	79	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	1	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
62	131	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
63	190	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
64	9	140	2	0	0	4	1	0	0	2	0	0	0	0	0	0	0	1	0	0	3	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
65	0	0	1	0	0	0	0	45	8	1	0	0	0	3	0	0	2	4	2	0	0	0	1	0	3	3	0	0	0	0	0	1	0	0	3	0	0	0	1	1	0	0	0	0	2	0	0	0	0	0	0	3	0	0	0	0	0	0	0	0	0	0	0	0	0
66	169	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
67	1	10	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
68	109	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
69	189	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
70	41	132	1	0	0	0	1	0	1	0	0	2	0	0	1	0	0	2	0	0	2	0	0	1	0	0	0	0	0	1	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	1	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
71	3	1	2	0	0	0	0	0	0	0	9	25	34	0	0	9	2	0	3	0	0	19	0	0	0	1	0	7	0	0	0	0	6	2	0	10	0	0	0	0	0	6	0	0	0	2	0	0	0	2	0	0	0	0	1	1	0	0	0	0	0	0	0	0	0
72	1	2	5	9	1	0	7	14	52	0	0	0	0	34	0	1	6	2	3	0	0	0	13	9	9	0	0	0	3	1	0	1	0	0	0	0	0	0	0	1	0	0	1	1	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
73	0	0	0	0	3	94	2	1	0	0	0	1	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
74	38	162	5	0	1	0	3	0	0	3	0	0	0	0	3	0	1	3	0	0	5	0	1	0	0	1	0	0	2	4	0	0	0	0	0	0	0	1	0	0	0	0	0	0	0	0	0	0	0	0	1	0	0	0	0	0	0	0	0	0	0	0	0	0	0
75	118	0	0	0	0	0	1	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
76	0	13	2	169	7	1	6	1	2	1	0	0	0	0	1	1	0	1	0	0	0	0	0	1	0	2	0	0	0	0	0	2	0	1	0	0	0	3	0	1	0	0	0	0	0	0	1	0	0	0	0	0	0	0	0	0	2	0	0	0	0	0	0	1	0
77	0	0	0	0	0	0	0	25	0	0	0	0	0	0	0	0	0	0	0	0	0	0	1	1	1	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	5	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
78	18	118	13	9	3	7	7	2	4	1	0	0	1	0	4	0	2	4	1	0	5	0	0	1	0	0	0	0	0	1	1	1	0	0	0	0	0	1	0	1	0	0	1	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0
79	0	0	0	0	0	0	1	2	0	0	0	0	0	0	0	0	1	0	2	0	0	1	2	1	0	3	0	0	0	0	10	0	0	3	1	0	0	1	0	2	0	0	1	0	3	0	0	0	3	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0	0"""
mat = []
for l in best.split('\n'):
    e = l.replace(' ', '').split('\t')
    mat.append([])
    for n in e[1:len(e)]:
        mat[len(mat) - 1].append(int(n))
ordered_mat = []
temp_map = {k: [] for k in range(65)}
n = 0
for r in mat:
    n = n + 1
    temp_map[max(enumerate(r), key=lambda x: x[1])[0]].append(r)

for i in range(65):
    for r in temp_map[i]:
        ordered_mat.append(r)

ax1 = plt.subplot(121)
im = plt.pcolormesh(ordered_mat)
ax1.set_ylabel('Cluters', fontsize=10)
ax1.set_xlabel('Topics', fontsize=10)
ax1.set_xlim(0, 65)
ax1.tick_params(axis='both', labelsize='10')
plt.colorbar(im)
plt.title(
    'Distribution of the ''Best'' Clustering Solution\nUnnormalized', fontsize=10)


for r in range(len(ordered_mat)):
    s = sum(ordered_mat[r])
    ordered_mat[r] = list(map(lambda x: x / s, ordered_mat[r]))
ax1 = plt.subplot(122)
im = plt.pcolormesh(ordered_mat)
ax1.set_xlabel('Topics', fontsize=10)
ax1.set_xlim(0, 65)
ax1.tick_params(axis='both', labelsize='10')
plt.colorbar(im)
plt.title('Distribution of the ''Best'' Clustering Solution\nNormalized for each Cluster', fontsize=10)

plt.show()
